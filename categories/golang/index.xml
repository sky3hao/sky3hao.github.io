<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 老鹰之歌的博客</title>
    <link>http://localhost:1313/categories/golang/</link>
    <description>Recent content in golang on 老鹰之歌的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 07 Nov 2022 14:05:23 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC介绍</title>
      <link>http://localhost:1313/post/go/go-grpc/</link>
      <pubDate>Mon, 07 Nov 2022 14:05:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-grpc/</guid>
      <description>gRPC 是一个 基于 HTTP/2 协议设计的 RPC 框架, 它采用了 Protobuf 作为接口定义语言 (interface definition language， IDL). 因此下面在讲 gRPC 之前先介绍一下与之相关的技术. 1. RPC 1.1 简介 RPC 代</description>
    </item>
    
    <item>
      <title>单元测试-GoConvey</title>
      <link>http://localhost:1313/post/go/unit/go-unit-goconvy/</link>
      <pubDate>Mon, 07 Nov 2022 13:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/unit/go-unit-goconvy/</guid>
      <description>1. 介绍 GoConvey直接与go test集成，提供了很多丰富的断言函数，能够在终端输出可读的彩色测试结果，并且还支持全自动的Web UI。 安装</description>
    </item>
    
    <item>
      <title>单元测试-GoMock</title>
      <link>http://localhost:1313/post/go/unit/go-unit-gomock/</link>
      <pubDate>Mon, 07 Nov 2022 13:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/unit/go-unit-gomock/</guid>
      <description>1. Mock &amp;amp; Stub Mock（模拟）和 Stub（桩）是在测试过程中，模拟外部依赖行为的两种常用的技术手段。通过 Mock 和 Stub 我们不仅可以让测试环境没有外部依赖而</description>
    </item>
    
    <item>
      <title>单元测试-testify</title>
      <link>http://localhost:1313/post/go/unit/go-unit-testify/</link>
      <pubDate>Mon, 07 Nov 2022 13:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/unit/go-unit-testify/</guid>
      <description>1. 简介 Testify基于gotesting编写，所以语法上、执行命令行与go test完全兼容，只是其是比较清晰的断言定义。它提供 assert 和 require 两种用</description>
    </item>
    
    <item>
      <title>单元测试-testing</title>
      <link>http://localhost:1313/post/go/unit/go-unit-testing/</link>
      <pubDate>Mon, 07 Nov 2022 13:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/unit/go-unit-testing/</guid>
      <description>testing 包被专门用来进行单元测试以及进行自动化测试，打印日志和错误报告。 1. go test工具 go test命令是一个按照一定约定和组织的测试代码的驱动程序</description>
    </item>
    
    <item>
      <title>Golang GMP</title>
      <link>http://localhost:1313/post/go/go-gmp/</link>
      <pubDate>Mon, 07 Nov 2022 11:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-gmp/</guid>
      <description>多个线程可以属于同一个进程并共享内存空间。因为不需要创建新的虚拟内存空间，所以它们也不需要内存管理单元处理上下文的切换，线程之间的通信也正是</description>
    </item>
    
    <item>
      <title>Golang GODEBUG</title>
      <link>http://localhost:1313/post/go/go-debug/</link>
      <pubDate>Mon, 07 Nov 2022 11:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-debug/</guid>
      <description>1. 用 GODEBUG 看调度跟踪 1.1 两个参数 schedtrace：设置 schedtrace=X 参数可以使运行时在每 X 毫秒发出一行调度器的摘要信息到标准 err 输出中。 scheddetai</description>
    </item>
    
    <item>
      <title>Golang PProf</title>
      <link>http://localhost:1313/post/go/go-pprof/</link>
      <pubDate>Mon, 07 Nov 2022 11:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-pprof/</guid>
      <description>1. 概念 1.1 PProf 是什么 在 Go 语言中，PProf 是用于可视化和分析性能分析数据的工具，PProf 以 profile.proto 读取分析样本的集合，并生成报告以可视化并帮助分析数</description>
    </item>
    
    <item>
      <title>Golang Trace</title>
      <link>http://localhost:1313/post/go/go-trace/</link>
      <pubDate>Mon, 07 Nov 2022 11:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-trace/</guid>
      <description>例如 Goroutine 在执行时会做哪些操作？执行/阻塞了多长时间？在什么时候阻止？在哪里被阻止的？谁又锁/解锁了它们？GC 是怎么影响到 Goroutine 的执行的？这些东西用</description>
    </item>
    
    <item>
      <title>Golang 垃圾回收</title>
      <link>http://localhost:1313/post/go/go-gc/</link>
      <pubDate>Mon, 07 Nov 2022 11:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-gc/</guid>
      <description>1. 进程里面的堆和栈 我们知道进程之间内存是隔离的不共享。所以一般说到内存就是指的一个进程用到的内存。 而一个进程的内存一般可以分为 5个区：栈区,</description>
    </item>
    
    <item>
      <title>Gops</title>
      <link>http://localhost:1313/post/go/go-gops/</link>
      <pubDate>Mon, 07 Nov 2022 11:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-gops/</guid>
      <description>gops 是由 Google 官方出品的一个命令行工具，与 ps 命令的功能类似，能够查看并诊断当前系统中 Go 程序的运行状态及内部情况，在一些使用场景中具有较大的存在意义</description>
    </item>
    
  </channel>
</rss>
